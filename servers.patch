--- ngx_http_upstream_new.c	2015-03-21 13:38:47.486551797 +0800
+++ ngx_http_upstream_1.4.1stable.c	2015-03-21 13:38:21.414547455 +0800
@@ -143,10 +143,6 @@
 static char *ngx_http_upstream(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy);
 static char *ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
-static char *ngx_http_upstream_servers(ngx_conf_t *cf, ngx_command_t *cmd,
-    void *conf);
-static char *ngx_http_upstream_port(ngx_conf_t *cf, ngx_command_t *cmd,
-    void *conf);
 
 static ngx_addr_t *ngx_http_upstream_get_local(ngx_http_request_t *r,
     ngx_http_upstream_local_t *local);
@@ -303,22 +299,6 @@
       0,
       NULL },
 
-      //servers $(upstream),use port
-      { ngx_string("servers"),
-        NGX_HTTP_UPS_CONF|NGX_CONF_TAKE1,
-        ngx_http_upstream_servers,
-        NGX_HTTP_SRV_CONF_OFFSET,
-        0,
-        NULL },
-
-      { ngx_string("port"),
-        NGX_HTTP_UPS_CONF|NGX_CONF_TAKE1,
-        ngx_http_upstream_port,
-        NGX_HTTP_SRV_CONF_OFFSET,
-        0,
-        NULL },
-
-
       ngx_null_command
 };
 
@@ -4572,13 +4552,7 @@
     ngx_memzero(&u, sizeof(ngx_url_t));
 
     u.url = value[1];
-
-    if(uscf->default_port){
-    	u.default_port = uscf->default_port;
-    }
-    else{
-    	u.default_port = 80;
-    }
+    u.default_port = 80;
 
     if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
         if (u.err) {
@@ -4684,135 +4658,6 @@
     return NGX_CONF_ERROR;
 }
 
-static char *
-ngx_http_upstream_servers(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
-{
-    ngx_http_upstream_srv_conf_t  *uscf = conf;
-
-    u_char 							*port;
-    ngx_str_t                   *value;
-    ngx_url_t                    u,ut;
-
-    ngx_http_upstream_server_t  *us,*us_old;
-    ngx_uint_t                      i;
-   	ngx_http_upstream_main_conf_t  *umcf;
-   	ngx_http_upstream_srv_conf_t	*uscf_old,**uscfp;
-
-    value = cf->args->elts;
-
-    ngx_memzero(&ut, sizeof(ngx_url_t));
-    ut.url = value[1];
-
-    if(uscf->default_port){
-    	ut.default_port = uscf->default_port;
-    }
-    else{
-    	ut.default_port = 80;
-      }
-
-    //find old uscf
-    umcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_upstream_module);
-   	uscfp = umcf->upstreams.elts;
-
-   	for (i = 0; i < umcf->upstreams.nelts; i++) {
-
-   		if (uscfp[i]->host.len == ut.url.len
-   				&& ngx_strncasecmp(uscfp[i]->host.data, ut.url.data, ut.url.len)
-   				== 0){
-   			break;
-   		}
-   	}
-
-   	if(i == umcf->upstreams.nelts){
-   		ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-  	                       "upstream must be set before \"%V\"", &value[1]);
-
-      return NGX_CONF_ERROR;
-   	}
-
-   	//set uscf servers
-   	uscf_old = uscfp[i];
-
-    if (uscf->servers == NULL) {
-          uscf->servers = ngx_array_create(cf->pool, 4,
-                                           sizeof(ngx_http_upstream_server_t));
-          if (uscf->servers == NULL) {
-              return NGX_CONF_ERROR;
-          }
-      }
-
-   	for(i = 0; i < uscf_old->servers->nelts; i++){
-   		us_old = (ngx_http_upstream_server_t *)uscf_old->servers->elts + i;
-
-        us = ngx_array_push(uscf->servers);
-        if (us == NULL) {
-            return NGX_CONF_ERROR;
-        }
-
-        ngx_memzero(us, sizeof(ngx_http_upstream_server_t));
-
-        ngx_memzero(&u, sizeof(ngx_url_t));
-
-        //name :127.0.0.1:80 ,repair port
-        port = ngx_strlchr(us_old->addrs->name.data,
-        		us_old->addrs->name.data+us_old->addrs->name.len,':');
-
-        if(port == NULL){
-        	u.url = us_old->addrs->name;
-        }
-        else{
-        	u.url.data = us_old->addrs->name.data;
-        	u.url.len = port - us_old->addrs->name.data;
-        }
-
-        if(uscf->default_port){
-        	u.default_port = uscf->default_port;
-        }
-        else{
-        	u.default_port = 80;
-        }
-
-        //parse again
-        if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
-            if (u.err) {
-                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                                   "%s in upstream \"%V\"", u.err, &u.url);
-            }
-
-            return NGX_CONF_ERROR;
-        }
-
-        us->addrs = u.addrs;
-        us->naddrs = u.naddrs;
-        us->weight = us_old->weight;
-        us->max_fails = us_old->max_fails;
-        us->fail_timeout = us_old->fail_timeout;
-        us->backup = us_old->backup;
-        us->down = us_old->down;
-
-   	}
-
-    return NGX_CONF_OK;
-}
-
-static char *
-ngx_http_upstream_port(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
-{
-    ngx_http_upstream_srv_conf_t  *uscf = conf;
-    ngx_str_t                   *value;
-
-    value = cf->args->elts;
-    uscf->default_port = ngx_atoi(value[1].data,value[1].len);
-
-    if(uscf->servers != NULL){
-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                           "port  \"%V\" should be set before servers", &value[1]);
-
-        return NGX_CONF_ERROR;
-    }
-
-    return NGX_CONF_OK;
-}
 
 ngx_http_upstream_srv_conf_t *
 ngx_http_upstream_add(ngx_conf_t *cf, ngx_url_t *u, ngx_uint_t flags)
